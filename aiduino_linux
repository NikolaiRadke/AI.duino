#!/bin/bash
# AI.duino v1.0 - Linux - Easy Install

echo "ü§ñ Installing AI.duino v1.0..."

# Find Arduino IDE plugins directory
PLUGIN_DIR=""
for dir in "/usr/share/arduino/resources/app/plugins" \
           "/opt/arduino-ide/resources/app/plugins" \
           "$HOME/.local/share/arduino-ide/resources/app/plugins"; do
    if [ -d "$dir" ]; then
        PLUGIN_DIR="$dir"
        break
    fi
done

if [ -z "$PLUGIN_DIR" ]; then
    echo "‚ùå Arduino IDE 2.x not found!"
    echo "Please install from: https://www.arduino.cc/en/software"
    exit 1
fi

echo "üìÅ Installing to: $PLUGIN_DIR"

# Create plugin directory
TARGET="$PLUGIN_DIR/arduino-claude-assistant"
sudo rm -rf "$TARGET" 2>/dev/null
sudo mkdir -p "$TARGET/extension/out"

# Save the enhanced package.json
sudo tee "$TARGET/extension/package.json" > /dev/null << 'PACKAGE_EOF'
{
  "name": "arduino-ai-assistant",
  "displayName": "Arduino AI Assistant",
  "description": "KI-gest√ºtzte Hilfe f√ºr Arduino mit Claude und ChatGPT: Code verbessern, Fehler erkl√§ren, Debug-Hilfe",
  "version": "2.1.0",
  "publisher": "local",
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": ["Other", "Debuggers", "Education"],
  "keywords": ["arduino", "ai", "claude", "chatgpt", "debug", "fehler", "hilfe"],
  "activationEvents": [
    "onLanguage:cpp",
    "onLanguage:c",
    "onLanguage:ino"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "arduino-ai.quickMenu",
        "title": "Quick-Men√º √∂ffnen",
        "category": "Arduino AI",
        "icon": "$(robot)"
      },
      {
        "command": "arduino-ai.switchModel",
        "title": "AI-Modell wechseln",
        "category": "Arduino AI",
        "icon": "$(sync)"
      },
      {
        "command": "arduino-ai.setApiKey",
        "title": "API Key eingeben",
        "category": "Arduino AI",
        "icon": "$(key)"
      },
      {
        "command": "arduino-ai.improveCode",
        "title": "Code verbessern",
        "category": "Arduino AI",
        "icon": "$(symbol-method)"
      },
      {
        "command": "arduino-ai.explainCode",
        "title": "Code erkl√§ren",
        "category": "Arduino AI",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "arduino-ai.addComments",
        "title": "Kommentare hinzuf√ºgen",
        "category": "Arduino AI",
        "icon": "$(edit)"
      },
      {
        "command": "arduino-ai.explainError",
        "title": "Fehler erkl√§ren",
        "category": "Arduino AI",
        "icon": "$(error)"
      },
      {
        "command": "arduino-ai.debugHelp",
        "title": "Debug-Hilfe",
        "category": "Arduino AI",
        "icon": "$(bug)"
      }
    ],
    "keybindings": [
      {
        "command": "arduino-ai.quickMenu",
        "key": "ctrl+shift+c",
        "mac": "cmd+shift+c",
        "when": "editorTextFocus && resourceExtname == .ino"
      },
      {
        "command": "arduino-ai.explainError",
        "key": "ctrl+shift+e",
        "mac": "cmd+shift+e",
        "when": "editorTextFocus && resourceExtname == .ino"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "submenu": "arduino-ai",
          "group": "1_modification@1",
          "when": "resourceExtname == .ino"
        }
      ],
      "arduino-ai": [
        {
          "command": "arduino-ai.improveCode",
          "when": "editorHasSelection",
          "group": "1_code@1"
        },
        {
          "command": "arduino-ai.explainCode",
          "when": "editorHasSelection",
          "group": "1_code@2"
        },
        {
          "command": "arduino-ai.addComments",
          "when": "editorHasSelection",
          "group": "1_code@3"
        },
        {
          "command": "arduino-ai.explainError",
          "group": "2_debug@1"
        },
        {
          "command": "arduino-ai.debugHelp",
          "group": "2_debug@2"
        },
        {
          "command": "arduino-ai.switchModel",
          "group": "3_settings@1"
        },
        {
          "command": "arduino-ai.setApiKey",
          "group": "3_settings@2"
        }
      ]
    },
    "submenus": [
      {
        "id": "arduino-ai",
        "label": "ü§ñ AI Assistant"
      }
    ],
    "configuration": {
      "title": "Arduino AI Assistant",
      "properties": {
        "arduino-ai.showWelcomeOnStartup": {
          "type": "boolean",
          "default": true,
          "description": "Willkommensnachricht beim Start anzeigen"
        },
        "arduino-ai.autoDetectErrors": {
          "type": "boolean",
          "default": true,
          "description": "Automatisch auf Compiler-Fehler hinweisen"
        },
        "arduino-ai.defaultModel": {
          "type": "string",
          "enum": ["claude", "chatgpt"],
          "default": "claude",
          "description": "Standard AI-Modell beim Start"
        }
      }
    }
  },
  "author": {
    "name": "Arduino AI Assistant Team"
  },
  "license": "MIT"
}
PACKAGE_EOF

# Save the user-friendly extension.js
sudo tee "$TARGET/extension/out/extension.js" > /dev/null << 'EXTENSION_EOF'
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deactivate = exports.activate = void 0;
const vscode = require("vscode");
const https = require("https");
const fs = require("fs");
const os = require("os");

let statusBarItem;
let apiKey = '';
let openaiApiKey = '';
let currentModel = 'claude'; // 'claude' oder 'chatgpt'
const API_KEY_FILE = os.homedir() + '/.arduino-claude-api-key';
const OPENAI_KEY_FILE = os.homedir() + '/.arduino-openai-api-key';
const MODEL_FILE = os.homedir() + '/.arduino-ai-model';

let tokenUsage = {
    claude: { input: 0, output: 0, cost: 0 },
    chatgpt: { input: 0, output: 0, cost: 0 },
    daily: new Date().toDateString()
};
const TOKEN_USAGE_FILE = os.homedir() + '/.arduino-ai-token-usage.json';

// Token-Preise (Stand 2024)
const TOKEN_PRICES = {
    claude: {
        input: 0.003 / 1000,   // $3 per 1M input tokens
        output: 0.015 / 1000   // $15 per 1M output tokens
    },
    chatgpt: {
        input: 0.03 / 1000,    // $30 per 1M input tokens (GPT-4)
        output: 0.06 / 1000    // $60 per 1M output tokens (GPT-4)
    }
};

function activate(context) {
    console.log('ü§ñ Arduino AI Assistant aktiviert!');
    
    // API Keys und Model beim Start laden
    loadApiKeys();
    loadSelectedModel();
    loadTokenUsage();      // Lade Daten
    
    // Status Bar mit Tooltip
    statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
    updateStatusBar();
    statusBarItem.command = "arduino-ai.quickMenu";
    statusBarItem.show();
    
    // Commands registrieren
    context.subscriptions.push(
        vscode.commands.registerCommand('arduino-ai.quickMenu', showQuickMenu),
        vscode.commands.registerCommand('arduino-ai.switchModel', switchModel),
        vscode.commands.registerCommand('arduino-ai.setApiKey', setApiKey),
        vscode.commands.registerCommand('arduino-ai.explainCode', explainCode),
        vscode.commands.registerCommand('arduino-ai.improveCode', improveCode),
        vscode.commands.registerCommand('arduino-ai.addComments', addComments),
        vscode.commands.registerCommand('arduino-ai.explainError', explainError),
        vscode.commands.registerCommand('arduino-ai.debugHelp', debugHelp),
        vscode.commands.registerCommand('arduino-ai.showTokenStats', showTokenStats),
        vscode.commands.registerCommand('arduino-ai.resetTokenStats', resetTokenStats),
        statusBarItem
    );
    
    // Willkommensnachricht
    if (!apiKey && !openaiApiKey) {
        setTimeout(() => {
            showWelcomeMessage();
        }, 1000);
    }
    
    // Auto-Fehler-Erkennung
    let errorTimeout;
    vscode.languages.onDidChangeDiagnostics(e => {
        clearTimeout(errorTimeout);
        errorTimeout = setTimeout(() => checkForErrors(), 1000);
    });
}
exports.activate = activate;

function loadApiKeys() {
    try {
        if (fs.existsSync(API_KEY_FILE)) {
            apiKey = fs.readFileSync(API_KEY_FILE, 'utf8').trim();
            console.log('‚úÖ Claude API Key geladen');
        }
        if (fs.existsSync(OPENAI_KEY_FILE)) {
            openaiApiKey = fs.readFileSync(OPENAI_KEY_FILE, 'utf8').trim();
            console.log('‚úÖ OpenAI API Key geladen');
        }
    } catch (error) {
        console.log('‚ùå Fehler beim Laden der API Keys:', error);
    }
}

function loadSelectedModel() {
    try {
        if (fs.existsSync(MODEL_FILE)) {
            currentModel = fs.readFileSync(MODEL_FILE, 'utf8').trim();
            console.log('‚úÖ Ausgew√§hltes Model:', currentModel);
        }
    } catch (error) {
        console.log('‚ùå Fehler beim Laden des Models:', error);
    }
}

function loadTokenUsage() {
    try {
        const currentDate = new Date();
        const today = currentDate.toDateString();
        
        console.log('=== TOKEN USAGE LADEN ===');
        console.log('Aktuelles Datum:', today);
        console.log('Timestamp:', currentDate.toISOString());
        
        if (fs.existsSync(TOKEN_USAGE_FILE)) {
            const fileContent = fs.readFileSync(TOKEN_USAGE_FILE, 'utf8');
            console.log('Datei-Inhalt:', fileContent);
            
            const data = JSON.parse(fileContent);
            console.log('Gespeichertes Datum:', data.daily);
            console.log('Datum-Vergleich:', data.daily === today);
            
            // Pr√ºfe ob es der gleiche Tag ist
            if (data.daily === today) {
                // Gleicher Tag - Daten √ºbernehmen
                tokenUsage = data;
                console.log('‚úÖ Token-Statistik vom gleichen Tag geladen');
                console.log('Geladene Werte:', {
                    claude: data.claude,
                    chatgpt: data.chatgpt
                });
            } else {
                // Anderer Tag - Reset
                console.log('üîÑ Neuer Tag erkannt - Reset der Statistik');
                console.log('Alt:', data.daily, 'Neu:', today);
                
                tokenUsage = {
                    claude: { input: 0, output: 0, cost: 0 },
                    chatgpt: { input: 0, output: 0, cost: 0 },
                    daily: today
                };
                saveTokenUsage();
            }
        } else {
            // Keine Datei vorhanden
            console.log('üìÑ Keine Token-Datei gefunden - erstelle neue');
            tokenUsage = {
                claude: { input: 0, output: 0, cost: 0 },
                chatgpt: { input: 0, output: 0, cost: 0 },
                daily: today
            };
            saveTokenUsage();
        }
        
        // Nach dem Laden StatusBar aktualisieren
        if (statusBarItem) {
            updateStatusBar();
        }
        
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der Token-Statistik:', error);
        
        // Bei Fehler mit leeren Werten starten
        tokenUsage = {
            claude: { input: 0, output: 0, cost: 0 },
            chatgpt: { input: 0, output: 0, cost: 0 },
            daily: new Date().toDateString()
        };
        saveTokenUsage();
    }
}

function saveTokenUsage() {
    try {
        fs.writeFileSync(TOKEN_USAGE_FILE, JSON.stringify(tokenUsage, null, 2));
    } catch (error) {
        console.log('Error saving token usage:', error);
    }
}

function estimateTokens(text) {
    // Grobe Sch√§tzung: ~4 Zeichen = 1 Token
    // F√ºr genauere Z√§hlung k√∂nnte man tiktoken verwenden
    return Math.ceil(text.length / 4);
}

function updateTokenUsage(model, inputText, outputText) {
    const inputTokens = estimateTokens(inputText);
    const outputTokens = estimateTokens(outputText);
    
    tokenUsage[model].input += inputTokens;
    tokenUsage[model].output += outputTokens;
    
    // Kosten berechnen
    const inputCost = inputTokens * TOKEN_PRICES[model].input;
    const outputCost = outputTokens * TOKEN_PRICES[model].output;
    tokenUsage[model].cost += (inputCost + outputCost);
    
    saveTokenUsage();
    updateStatusBar();
}

function saveSelectedModel() {
    try {
        fs.writeFileSync(MODEL_FILE, currentModel, { mode: 0o600 });
    } catch (error) {
        console.log('‚ùå Fehler beim Speichern des Models:', error);
    }
}

function updateStatusBar() {
    const hasApiKey = (currentModel === 'claude' && apiKey) || (currentModel === 'chatgpt' && openaiApiKey);
    const modelIcon = currentModel === 'claude' ? 'ü§ñ' : 'üß†';
    const modelName = currentModel === 'claude' ? 'Claude' : 'GPT-4';
    
    // Kosten f√ºr heute
    const todayCost = tokenUsage[currentModel].cost.toFixed(3);
    const costDisplay = todayCost > 0 ? ` ($${todayCost})` : '';
    
    if (hasApiKey) {
        statusBarItem.text = `${modelIcon} ${modelName}${costDisplay}`;
        statusBarItem.tooltip = `AI Assistant: ${modelName}\n` +
            `Heute: ${tokenUsage[currentModel].input + tokenUsage[currentModel].output} Tokens${costDisplay}\n` +
            `Input: ${tokenUsage[currentModel].input} | Output: ${tokenUsage[currentModel].output}\n` +
            `Klick f√ºr Men√º ‚Ä¢ Strg+Shift+C ‚Ä¢ Rechtsklick zum Wechseln`;
        statusBarItem.backgroundColor = undefined;
    } else {
        statusBarItem.text = `${modelIcon} ${modelName} $(warning)`;
        statusBarItem.tooltip = `${modelName} API Key fehlt! ‚Ä¢ Klick zum Einrichten`;
        statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');
    }
}

async function switchModel() {
    const items = [
        {
            label: 'ü§ñ Claude (Anthropic)',
            description: currentModel === 'claude' ? '‚úì Aktiv' : 'Claude-3.5-Sonnet',
            value: 'claude'
        },
        {
            label: 'üß† ChatGPT (OpenAI)',
            description: currentModel === 'chatgpt' ? '‚úì Aktiv' : 'GPT-4',
            value: 'chatgpt'
        }
    ];
    
    const selected = await vscode.window.showQuickPick(items, {
        placeHolder: 'W√§hle das AI-Modell'
    });
    
    if (selected) {
        currentModel = selected.value;
        saveSelectedModel();
        updateStatusBar();
        
        // Pr√ºfe ob API Key vorhanden
        const hasKey = (currentModel === 'claude' && apiKey) || (currentModel === 'chatgpt' && openaiApiKey);
        if (!hasKey) {
            const choice = await vscode.window.showWarningMessage(
                `${selected.label} ben√∂tigt einen API Key`,
                'Jetzt eingeben',
                'Sp√§ter'
            );
            if (choice === 'Jetzt eingeben') {
                await setApiKey();
            }
        } else {
            vscode.window.showInformationMessage(`‚úÖ Gewechselt zu ${selected.label}`);
        }
    }
}

async function showWelcomeMessage() {
    const message = 'üëã Willkommen! Arduino AI Assistant unterst√ºtzt jetzt Claude und ChatGPT!';
    const choice = await vscode.window.showInformationMessage(
        message,
        'AI-Modell w√§hlen',
        'Sp√§ter'
    );
    
    if (choice === 'AI-Modell w√§hlen') {
        await switchModel();
    }
}

async function showQuickMenu() {
    const hasApiKey = (currentModel === 'claude' && apiKey) || (currentModel === 'chatgpt' && openaiApiKey);
    
    if (!hasApiKey) {
        const modelName = currentModel === 'claude' ? 'Claude' : 'ChatGPT';
        const choice = await vscode.window.showWarningMessage(
            `üîë Zuerst brauchst du einen ${modelName} API Key`,
            'Jetzt einrichten',
            'Modell wechseln',
            'Abbrechen'
        );
        if (choice === 'Jetzt einrichten') {
            await setApiKey();
        } else if (choice === 'Modell wechseln') {
            await switchModel();
        }
        return;
    }
    
    const editor = vscode.window.activeTextEditor;
    const hasSelection = editor && !editor.selection.isEmpty;
    const hasErrors = await checkForErrors(false);
    
    const items = [
        {
            label: '$(symbol-method) Code verbessern',
            description: hasSelection ? 'Ausgew√§hlten Code optimieren' : 'Erst Code markieren',
            command: 'arduino-ai.improveCode',
            enabled: hasSelection
        },
        {
            label: '$(comment-discussion) Code erkl√§ren',
            description: hasSelection ? 'Ausgew√§hlten Code erkl√§ren' : 'Erst Code markieren',
            command: 'arduino-ai.explainCode',
            enabled: hasSelection
        },
        {
            label: '$(edit) Kommentare hinzuf√ºgen',
            description: hasSelection ? 'Code kommentieren' : 'Erst Code markieren',
            command: 'arduino-ai.addComments',
            enabled: hasSelection
        },
        {
            label: '$(error) Fehler erkl√§ren',
            description: hasErrors ? 'üî¥ Compiler-Fehler gefunden' : 'Keine Fehler',
            command: 'arduino-ai.explainError',
            enabled: hasErrors
        },
        {
            label: '$(bug) Debug-Hilfe',
            description: 'Hilfe bei der Fehlersuche',
            command: 'arduino-ai.debugHelp',
            enabled: true
        },
        {
            label: '$(sync) AI-Modell wechseln',
            description: `Aktuell: ${currentModel === 'claude' ? 'Claude' : 'ChatGPT'}`,
            command: 'arduino-ai.switchModel',
            enabled: true
        },
        {
            label: '$(key) API Key √§ndern',
            description: `${currentModel === 'claude' ? 'Claude' : 'ChatGPT'} Key`,
            command: 'arduino-ai.setApiKey',
            enabled: true
        },
        {
            label: '$(graph) Token-Statistik',
            description: `Heute: $${tokenUsage.claude.cost.toFixed(3)} (Claude) | $${tokenUsage.chatgpt.cost.toFixed(3)} (GPT)`,
            command: 'arduino-ai.showTokenStats',
            enabled: true
        }
    ].filter(item => item.enabled);
    
    if (items.length === 0) {
        vscode.window.showInformationMessage(
            'üí° Markiere Arduino-Code um AI-Funktionen zu nutzen!'
        );
        return;
    }
    
    const selected = await vscode.window.showQuickPick(items, {
        placeHolder: 'Was m√∂chtest du tun?',
        title: `ü§ñ Arduino AI Assistant (${currentModel === 'claude' ? 'Claude' : 'ChatGPT'})`
    });
    
    if (selected) {
        vscode.commands.executeCommand(selected.command);
    }
}

async function setApiKey() {
    const modelName = currentModel === 'claude' ? 'Claude' : 'OpenAI';
    const prefix = currentModel === 'claude' ? 'sk-ant-' : 'sk-';
    const minLength = currentModel === 'claude' ? 50 : 40;
    
    const input = await vscode.window.showInputBox({
        prompt: `${modelName} API Key eingeben`,
        placeHolder: currentModel === 'claude' ? 'sk-ant-api-...' : 'sk-...',
        password: true,
        ignoreFocusOut: true,
        validateInput: (value) => {
            if (!value) return 'API Key erforderlich';
            if (!value.startsWith(prefix)) return `Muss mit "${prefix}" beginnen`;
            if (value.length < minLength) return 'Key scheint zu kurz';
            return null;
        }
    });
    
    if (input) {
        try {
            if (currentModel === 'claude') {
                apiKey = input;
                fs.writeFileSync(API_KEY_FILE, apiKey, { mode: 0o600 });
            } else {
                openaiApiKey = input;
                fs.writeFileSync(OPENAI_KEY_FILE, openaiApiKey, { mode: 0o600 });
            }
            updateStatusBar();
            vscode.window.showInformationMessage(
                `‚úÖ ${modelName} API Key gespeichert!`
            );
            return true;
        } catch (error) {
            vscode.window.showErrorMessage(
                '‚ùå Fehler beim Speichern: ' + error.message
            );
            return false;
        }
    }
    return false;
}

// Erweiterte API-Aufruf-Funktion f√ºr beide Modelle
function callAI(prompt) {
    if (currentModel === 'claude') {
        return callClaudeAPI(prompt);
    } else {
        return callChatGPTAPI(prompt);
    }
}

function callClaudeAPI(prompt) {
    return new Promise((resolve, reject) => {
        if (!apiKey) {
            reject(new Error('Kein Claude API Key gesetzt'));
            return;
        }

        const data = JSON.stringify({
            model: "claude-3-5-sonnet-20241022",
            max_tokens: 2000,
            messages: [{ 
                role: "user", 
                content: prompt 
            }]
        });

        const options = {
            hostname: 'api.anthropic.com',
            port: 443,
            path: '/v1/messages',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(data),
                'x-api-key': apiKey,
                'anthropic-version': '2023-06-01'
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';

            res.on('data', (chunk) => {
                responseData += chunk;
            });

            res.on('end', () => {
                try {
                    const parsedData = JSON.parse(responseData);
                    
                    if (res.statusCode === 200) {
                        const response = parsedData.content[0].text;
                        
                        // Token-Tracking hinzuf√ºgen - NEUE ZEILEN!
                        updateTokenUsage('claude', prompt, response);
                        console.log('Claude tokens tracked:', estimateTokens(prompt), 'in,', estimateTokens(response), 'out');
                        
                        resolve(response);
                    } else {
                        if (res.statusCode === 401) {
                            reject(new Error('Claude API Key ung√ºltig'));
                        } else {
                            reject(new Error(`Claude API Error (${res.statusCode}): ${parsedData.error?.message || 'Unbekannter Fehler'}`));
                        }
                    }
                } catch (e) {
                    reject(new Error('Fehler beim Parsen der Claude-Antwort'));
                }
            });
        });

        req.on('error', (e) => {
            reject(new Error('Netzwerkfehler: ' + e.message));
        });

        req.write(data);
        req.end();
    });
}


function callChatGPTAPI(prompt) {
    return new Promise((resolve, reject) => {
        if (!openaiApiKey) {
            reject(new Error('Kein OpenAI API Key gesetzt'));
            return;
        }

        const data = JSON.stringify({
            model: "gpt-4",
            messages: [
                {
                    role: "system",
                    content: "Du bist ein hilfreicher Arduino-Programmier-Assistent. Antworte immer auf Deutsch und erkl√§re Arduino-Code verst√§ndlich."
                },
                { 
                    role: "user", 
                    content: prompt 
                }
            ],
            max_tokens: 2000,
            temperature: 0.7
        });

        const options = {
            hostname: 'api.openai.com',
            port: 443,
            path: '/v1/chat/completions',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(data),
                'Authorization': `Bearer ${openaiApiKey}`
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';

            res.on('data', (chunk) => {
                responseData += chunk;
            });

            res.on('end', () => {
                try {
                    const parsedData = JSON.parse(responseData);
                    
                    if (res.statusCode === 200) {
                        const response = parsedData.choices[0].message.content;
                        
                        // Token-Tracking hinzuf√ºgen - NEUE ZEILEN!
                        updateTokenUsage('chatgpt', prompt, response);
                        console.log('ChatGPT tokens tracked:', estimateTokens(prompt), 'in,', estimateTokens(response), 'out');
                        
                        resolve(response);
                    } else {
                        if (res.statusCode === 401) {
                            reject(new Error('OpenAI API Key ung√ºltig'));
                        } else {
                            reject(new Error(`OpenAI API Error (${res.statusCode}): ${parsedData.error?.message || 'Unbekannter Fehler'}`));
                        }
                    }
                } catch (e) {
                    reject(new Error('Fehler beim Parsen der ChatGPT-Antwort'));
                }
            });
        });

        req.on('error', (e) => {
            reject(new Error('Netzwerkfehler: ' + e.message));
        });

        req.write(data);
        req.end();
    });
}

function estimateTokens(text) {
    // Verbesserte Sch√§tzung basierend auf OpenAI's Faustregel
    // Ber√ºcksichtigt auch Code-Strukturen
    
    if (!text) return 0;
    
    // Basis: ~4 Zeichen = 1 Token f√ºr normalen Text
    let tokens = text.length / 4;
    
    // Code hat oft mehr Tokens wegen Syntax
    const codeIndicators = text.match(/[{}()\[\];,.<>]/g);
    if (codeIndicators) {
        tokens += codeIndicators.length * 0.3;
    }
    
    // Neue Zeilen z√§hlen auch als Tokens
    const newlines = text.match(/\n/g);
    if (newlines) {
        tokens += newlines.length;
    }
    
    return Math.ceil(tokens);
}

// Alle anderen Funktionen verwenden jetzt callAI statt callClaudeAPI
async function explainError() {
    const editor = vscode.window.activeTextEditor;
    if (!editor || !editor.document.fileName.endsWith('.ino')) {
        vscode.window.showWarningMessage('√ñffne eine .ino Datei');
        return;
    }
    
    const diagnostics = vscode.languages.getDiagnostics(editor.document.uri);
    const errors = diagnostics.filter(d => d.severity === vscode.DiagnosticSeverity.Error);
    
    if (errors.length === 0) {
        vscode.window.showInformationMessage('üéâ Keine Fehler gefunden!');
        return;
    }
    
    let selectedError;
    if (errors.length === 1) {
        selectedError = errors[0];
    } else {
        const items = errors.map(err => ({
            label: `Zeile ${err.range.start.line + 1}`,
            description: err.message.substring(0, 60) + '...',
            error: err
        }));
        
        const selected = await vscode.window.showQuickPick(items, {
            placeHolder: `${errors.length} Fehler gefunden - welchen erkl√§ren?`
        });
        
        if (!selected) return;
        selectedError = selected.error;
    }
    
    const line = selectedError.range.start.line;
    const startLine = Math.max(0, line - 5);
    const endLine = Math.min(editor.document.lineCount - 1, line + 5);
    const codeContext = editor.document.getText(
        new vscode.Range(startLine, 0, endLine, Number.MAX_VALUE)
    );
    
    const prompt = `Arduino Compiler-Fehler erkl√§ren und l√∂sen:

Fehler in Zeile ${line + 1}: ${selectedError.message}

Code-Kontext:
\`\`\`cpp
${codeContext}
\`\`\`

Bitte erkl√§re:
1. Was bedeutet dieser Fehler?
2. Warum tritt er auf?
3. Wie behebe ich ihn?
4. Zeige den korrigierten Code

Erkl√§re einfach und verst√§ndlich auf Deutsch.`;
    
    try {
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: `${currentModel === 'claude' ? 'Claude' : 'ChatGPT'} analysiert den Fehler...`,
            cancellable: false
        }, async () => {
            const response = await callAI(prompt);
            
            const panel = vscode.window.createWebviewPanel(
                'aiError',
                'üîß Fehler-Erkl√§rung',
                vscode.ViewColumn.Beside,
                { enableScripts: true }
            );
            
            panel.webview.html = createErrorExplanationHtml(
                selectedError.message,
                line + 1,
                response,
                currentModel
            );
        });
    } catch (error) {
        handleApiError(error);
    }
}

async function explainCode() {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
        vscode.window.showWarningMessage('Kein Code-Editor aktiv');
        return;
    }
    
    const selection = editor.selection;
    const selectedText = editor.document.getText(selection);
    
    if (!selectedText.trim()) {
        vscode.window.showWarningMessage('Bitte markiere den Code, den du erkl√§rt haben m√∂chtest');
        return;
    }
    
    const prompt = `Erkl√§re diesen Arduino-Code auf Deutsch in einfacher, verst√§ndlicher Sprache:

\`\`\`cpp
${selectedText}
\`\`\`

Erkl√§re:
- Was der Code macht
- Wie er funktioniert
- Welche Hardware er ansteuert
- Wichtige Konzepte f√ºr Anf√§nger

Sei freundlich und ausf√ºhrlich.`;
    
    try {
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: `${currentModel === 'claude' ? 'Claude' : 'ChatGPT'} erkl√§rt den Code...`,
            cancellable: false
        }, async () => {
            const response = await callAI(prompt);
            
            const outputChannel = vscode.window.createOutputChannel(`${currentModel === 'claude' ? 'Claude' : 'ChatGPT'} Erkl√§rung`);
            outputChannel.clear();
            outputChannel.appendLine(`ü§ñ CODE-ERKL√ÑRUNG VON ${currentModel === 'claude' ? 'CLAUDE' : 'CHATGPT'}`);
            outputChannel.appendLine('='.repeat(50));
            outputChannel.appendLine('');
            outputChannel.appendLine(response);
            outputChannel.show();
        });
    } catch (error) {
        handleApiError(error);
    }
}

async function improveCode() {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
        vscode.window.showWarningMessage('Kein Code-Editor aktiv');
        return;
    }
    
    const selection = editor.selection;
    const selectedText = editor.document.getText(selection);
    
    if (!selectedText.trim()) {
        vscode.window.showWarningMessage('Bitte markiere den Code, den du verbessern m√∂chtest');
        return;
    }
    
    const prompt = `Verbessere diesen Arduino-Code:

\`\`\`cpp
${selectedText}
\`\`\`

Optimiere f√ºr:
- Non-blocking Code (millis statt delay)
- Speicher-Effizienz
- Bessere Lesbarkeit
- Arduino Best Practices
- Robustheit

Gib nur den verbesserten Code zur√ºck mit kurzen deutschen Kommentaren bei √Ñnderungen.`;
    
    try {
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: `${currentModel === 'claude' ? 'Claude' : 'ChatGPT'} optimiert den Code...`,
            cancellable: false
        }, async () => {
            const response = await callAI(prompt);
            
            const doc = await vscode.workspace.openTextDocument({
                content: response,
                language: 'cpp'
            });
            
            await vscode.window.showTextDocument(doc, vscode.ViewColumn.Beside);
            
            const choice = await vscode.window.showInformationMessage(
                '‚úÖ Code verbessert! Was m√∂chtest du tun?',
                'Original ersetzen',
                'Beide behalten'
            );
            
            if (choice === 'Original ersetzen') {
                await editor.edit(editBuilder => {
                    editBuilder.replace(selection, response);
                });
                vscode.window.showInformationMessage('‚úÖ Code wurde ersetzt!');
            }
        });
    } catch (error) {
        handleApiError(error);
    }
}

async function addComments() {
    const editor = vscode.window.activeTextEditor;
    if (!editor) return;
    
    const selection = editor.selection;
    const selectedText = editor.document.getText(selection);
    
    if (!selectedText.trim()) {
        vscode.window.showWarningMessage(
            'üí° Markiere den Code, den du kommentieren m√∂chtest'
        );
        return;
    }
    
    const prompt = `F√ºge hilfreiche deutsche Kommentare zu diesem Arduino-Code hinzu:

\`\`\`cpp
${selectedText}
\`\`\`

Regeln:
- Erkl√§re was jede wichtige Zeile macht
- Kommentiere Funktionen und ihre Parameter
- Erkl√§re Hardware-Interaktionen
- Nutze // f√ºr einzeilige und /* */ f√ºr mehrzeilige Kommentare
- Kommentare sollen Anf√§ngern helfen

Gib NUR den kommentierten Code zur√ºck, keine Erkl√§rungen drumherum.`;
    
    try {
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: `${currentModel === 'claude' ? 'Claude' : 'ChatGPT'} f√ºgt Kommentare hinzu...`,
            cancellable: false
        }, async () => {
            const response = await callAI(prompt);
            
            const preview = await vscode.workspace.openTextDocument({
                content: response,
                language: 'cpp'
            });
            
            await vscode.window.showTextDocument(preview, vscode.ViewColumn.Beside);
            
            const choice = await vscode.window.showInformationMessage(
                'Kommentare hinzugef√ºgt! Was m√∂chtest du tun?',
                'Code ersetzen',
                'So lassen'
            );
            
            if (choice === 'Code ersetzen') {
                await editor.edit(editBuilder => {
                    editBuilder.replace(selection, response);
                });
                vscode.window.showInformationMessage('‚úÖ Code wurde aktualisiert!');
            }
        });
    } catch (error) {
        handleApiError(error);
    }
}

async function debugHelp() {
    const editor = vscode.window.activeTextEditor;
    if (!editor) return;
    
    const options = [
        {
            label: '$(search) Serial Monitor Ausgabe analysieren',
            description: 'Hilfe bei der Interpretation von Debug-Ausgaben',
            value: 'serial'
        },
        {
            label: '$(circuit-board) Hardware-Problem diagnostizieren',
            description: 'M√∂gliche Hardware-Ursachen f√ºr Probleme',
            value: 'hardware'
        },
        {
            label: '$(watch) Debug-Code hinzuf√ºgen',
            description: 'Serial.print() Statements strategisch platzieren',
            value: 'debug'
        },
        {
            label: '$(pulse) Timing-Probleme finden',
            description: 'Hilfe bei delay(), millis() und Timing-Bugs',
            value: 'timing'
        }
    ];
    
    const selected = await vscode.window.showQuickPick(options, {
        placeHolder: 'Wobei brauchst du Hilfe?'
    });
    
    if (!selected) return;
    
    let prompt = '';
    let needsCode = true;
    
    switch (selected.value) {
        case 'serial':
            const serialOutput = await vscode.window.showInputBox({
                prompt: 'F√ºge deine Serial Monitor Ausgabe ein',
                placeHolder: 'z.B. "Sensor value: -1"',
                ignoreFocusOut: true
            });
            if (!serialOutput) return;
            
            prompt = `Analysiere diese Arduino Serial Monitor Ausgabe und erkl√§re was sie bedeutet:

Serial Output:
${serialOutput}

${editor.selection.isEmpty ? '' : `Relevanter Code:
\`\`\`cpp
${editor.document.getText(editor.selection)}
\`\`\``}

Erkl√§re:
- Was die Ausgabe bedeutet
- M√∂gliche Probleme
- L√∂sungsvorschl√§ge`;
            needsCode = false;
            break;
            
        case 'hardware':
            prompt = `Hilf bei der Hardware-Fehlersuche f√ºr diesen Arduino-Code:

\`\`\`cpp
${editor.document.getText(editor.selection.isEmpty ? undefined : editor.selection)}
\`\`\`

Bitte pr√ºfe:
- Typische Verdrahtungsfehler
- Pin-Konflikte
- Stromversorgungsprobleme
- Pull-up/Pull-down Widerst√§nde
- Kompatibilit√§tsprobleme`;
            break;
            
        case 'debug':
            prompt = `F√ºge strategische Debug-Ausgaben zu diesem Arduino-Code hinzu:

\`\`\`cpp
${editor.document.getText(editor.selection.isEmpty ? undefined : editor.selection)}
\`\`\`

F√ºge Serial.print() Statements hinzu um:
- Variablenwerte zu √ºberwachen
- Programmfluss zu verfolgen
- Timing zu messen
- Fehler zu finden`;
            break;
            
        case 'timing':
            prompt = `Analysiere Timing-Probleme in diesem Arduino-Code:

\`\`\`cpp
${editor.document.getText(editor.selection.isEmpty ? undefined : editor.selection)}
\`\`\`

Pr√ºfe auf:
- Blocking delays
- millis() overflow
- Race conditions
- Interrupt-Konflikte

Zeige verbesserten non-blocking Code.`;
            break;
    }
    
    if (needsCode && editor.selection.isEmpty) {
        vscode.window.showWarningMessage(
            'üí° Markiere relevanten Code f√ºr bessere Debug-Hilfe'
        );
        return;
    }
    
    try {
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: `${currentModel === 'claude' ? 'Claude' : 'ChatGPT'} analysiert das Problem...`,
            cancellable: false
        }, async () => {
            const response = await callAI(prompt);
            
            const panel = vscode.window.createWebviewPanel(
                'aiDebug',
                'üîç Debug-Hilfe',
                vscode.ViewColumn.Beside,
                { enableScripts: true }
            );
            
            panel.webview.html = createDebugHelpHtml(selected.label, response, currentModel);
        });
    } catch (error) {
        handleApiError(error);
    }
}

function createErrorExplanationHtml(error, line, explanation, model) {
    const modelBadge = model === 'claude' ? 
        '<span style="background: #6B46C1; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">Claude</span>' :
        '<span style="background: #10A37F; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">ChatGPT</span>';
    
    return `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                    padding: 20px;
                    line-height: 1.6;
                    color: #333;
                }
                .header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 20px;
                }
                .error-box {
                    background: #ffebee;
                    border: 1px solid #ef5350;
                    border-radius: 4px;
                    padding: 15px;
                    margin-bottom: 20px;
                }
                .error-title {
                    color: #c62828;
                    font-weight: bold;
                    margin-bottom: 5px;
                }
                .section {
                    margin: 20px 0;
                    padding: 15px;
                    background: #f5f5f5;
                    border-radius: 8px;
                }
                pre {
                    background: #1e1e1e;
                    color: #d4d4d4;
                    padding: 15px;
                    border-radius: 4px;
                    overflow-x: auto;
                }
                .solution {
                    background: #e8f5e9;
                    border-left: 4px solid #4caf50;
                    padding: 15px;
                    margin: 15px 0;
                }
                button {
                    background: #2196F3;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 14px;
                }
                button:hover {
                    background: #1976D2;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üîß Fehler-Erkl√§rung</h1>
                ${modelBadge}
            </div>
            
            <div class="error-box">
                <div class="error-title">Fehler in Zeile ${line}:</div>
                <code>${error}</code>
            </div>
            
            <div class="explanation">
                ${explanation.replace(/\n/g, '<br>')}
            </div>
            
            <br>
            <button onclick="copyToClipboard()">üìã L√∂sung kopieren</button>
            
            <script>
                function copyToClipboard() {
                    const text = document.querySelector('.explanation').innerText;
                    navigator.clipboard.writeText(text).then(() => {
                        alert('In Zwischenablage kopiert!');
                    });
                }
            </script>
        </body>
        </html>
    `;
}

function createDebugHelpHtml(title, content, model) {
    const modelBadge = model === 'claude' ? 
        '<span style="background: #6B46C1; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">Claude</span>' :
        '<span style="background: #10A37F; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">ChatGPT</span>';
    
    return `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                    padding: 20px;
                    line-height: 1.6;
                    color: #333;
                    max-width: 900px;
                    margin: 0 auto;
                }
                .header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    border-bottom: 2px solid #e0e0e0;
                    padding-bottom: 10px;
                }
                h1 {
                    color: #2196F3;
                    margin: 0;
                }
                .content {
                    margin: 20px 0;
                    white-space: pre-wrap;
                }
                pre {
                    background: #f4f4f4;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    padding: 15px;
                    overflow-x: auto;
                }
                .tip {
                    background: #fff3cd;
                    border-left: 4px solid #ffc107;
                    padding: 15px;
                    margin: 15px 0;
                }
                button {
                    background: #4CAF50;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 4px;
                    cursor: pointer;
                    margin-right: 10px;
                }
                button:hover {
                    background: #45a049;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>${title}</h1>
                ${modelBadge}
            </div>
            <div class="content">${content.replace(/\n/g, '<br>')}</div>
            
            <button onclick="copyToClipboard()">üìã Kopieren</button>
            <button onclick="window.close()">‚úì Schlie√üen</button>
            
            <script>
                function copyToClipboard() {
                    const text = document.querySelector('.content').innerText;
                    navigator.clipboard.writeText(text).then(() => {
                        alert('In Zwischenablage kopiert!');
                    });
                }
            </script>
        </body>
        </html>
    `;
}

async function checkForErrors(silent = true) {
    const editor = vscode.window.activeTextEditor;
    if (!editor || !editor.document.fileName.endsWith('.ino')) {
        return false;
    }
    
    const diagnostics = vscode.languages.getDiagnostics(editor.document.uri);
    const errors = diagnostics.filter(d => d.severity === vscode.DiagnosticSeverity.Error);
    
    if (errors.length > 0 && !silent) {
        const modelIcon = currentModel === 'claude' ? 'ü§ñ' : 'üß†';
        statusBarItem.text = `${modelIcon} ${currentModel === 'claude' ? 'Claude' : 'GPT-4'} $(error)`;
        statusBarItem.tooltip = `${errors.length} Fehler gefunden ‚Ä¢ Klick f√ºr Hilfe`;
        statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');
        
        setTimeout(() => updateStatusBar(), 5000);
    }
    
    return errors.length > 0;
}

function showTutorial() {
    const panel = vscode.window.createWebviewPanel(
        'aiTutorial',
        'üìö AI Assistant Tutorial',
        vscode.ViewColumn.One,
        {}
    );
    
    panel.webview.html = `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                    padding: 20px;
                    line-height: 1.6;
                    max-width: 800px;
                    margin: 0 auto;
                }
                h1 { color: #2196F3; }
                .shortcut {
                    background: #f0f0f0;
                    padding: 3px 6px;
                    border-radius: 3px;
                    font-family: monospace;
                }
                .feature {
                    margin: 20px 0;
                    padding: 15px;
                    background: #f8f9fa;
                    border-radius: 8px;
                    border-left: 4px solid #2196F3;
                }
                .tip {
                    background: #e3f2fd;
                    padding: 10px;
                    border-radius: 4px;
                    margin: 10px 0;
                }
                .model-badge {
                    display: inline-block;
                    padding: 4px 12px;
                    border-radius: 4px;
                    font-size: 14px;
                    font-weight: bold;
                    margin: 0 5px;
                }
                .claude {
                    background: #6B46C1;
                    color: white;
                }
                .chatgpt {
                    background: #10A37F;
                    color: white;
                }
            </style>
        </head>
        <body>
            <h1>ü§ñ Arduino AI Assistant</h1>
            
            <div class="tip">
                <strong>Schnellzugriff:</strong> <span class="shortcut">Strg+Shift+C</span> 
                oder klicke auf AI-Modell in der Statusleiste
            </div>
            
            <h2>üÜï Neu: Zwei AI-Modelle!</h2>
            <p>
                Du kannst jetzt zwischen zwei KI-Assistenten w√§hlen:
                <span class="model-badge claude">Claude</span> und 
                <span class="model-badge chatgpt">ChatGPT</span>
            </p>
            <ul>
                <li><strong>Claude:</strong> Anthropics fortschrittliches Modell - besonders gut f√ºr komplexe Code-Analysen</li>
                <li><strong>ChatGPT:</strong> OpenAIs GPT-4 - vielseitig und kreativ</li>
            </ul>
            
            <div class="feature">
                <h3>üîÑ Modell wechseln</h3>
                <p>Rechtsklick auf die Statusleiste oder w√§hle "AI-Modell wechseln" im Men√º</p>
            </div>
            
            <h2>Die wichtigsten Features:</h2>
            
            <div class="feature">
                <h3>üîß Code verbessern</h3>
                <p>Markiere deinen Arduino-Code und lass die AI ihn optimieren:</p>
                <ul>
                    <li>Non-blocking Code statt delay()</li>
                    <li>Speicher-Optimierungen</li>
                    <li>Best Practices f√ºr Arduino</li>
                </ul>
            </div>
            
            <div class="feature">
                <h3>üìù Automatische Kommentare</h3>
                <p>AI f√ºgt hilfreiche deutsche Kommentare hinzu:</p>
                <ul>
                    <li>Erkl√§rt was jede Zeile macht</li>
                    <li>Dokumentiert Funktionen</li>
                    <li>Perfekt f√ºr Anf√§nger</li>
                </ul>
            </div>
            
            <div class="feature">
                <h3>‚ùå Fehler verstehen</h3>
                <p>Compiler-Fehler? Kein Problem!</p>
                <ul>
                    <li>AI erkl√§rt was der Fehler bedeutet</li>
                    <li>Zeigt die L√∂sung</li>
                    <li>Verhindert h√§ufige Fehler</li>
                </ul>
            </div>
            
            <div class="feature">
                <h3>üêõ Debug-Hilfe</h3>
                <p>Probleme mit deinem Projekt?</p>
                <ul>
                    <li>Serial Monitor Ausgaben verstehen</li>
                    <li>Hardware-Probleme diagnostizieren</li>
                    <li>Timing-Bugs finden</li>
                </ul>
            </div>
            
            <h2>üí° Tipps:</h2>
            <ul>
                <li>Markiere immer den relevanten Code-Teil</li>
                <li>Je spezifischer die Auswahl, desto besser die Hilfe</li>
                <li>Beide AIs kennen alle Arduino-Bibliotheken</li>
                <li>Frage ruhig auf Deutsch!</li>
                <li>Probiere beide Modelle aus - manchmal liefern sie unterschiedliche Perspektiven</li>
            </ul>
            
            <div class="tip">
                <strong>Neu hier?</strong> Starte mit "Code erkl√§ren" - 
                markiere einfach Code und die AI erkl√§rt dir was er macht!
            </div>
        </body>
        </html>
    `;
}

function showTokenStats() {
    const totalCostToday = tokenUsage.claude.cost + tokenUsage.chatgpt.cost;
    
    const panel = vscode.window.createWebviewPanel(
        'tokenStats',
        'üìä Token-Statistik',
        vscode.ViewColumn.One,
        { enableScripts: true }
    );
    
    panel.webview.html = `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                    padding: 20px;
                    line-height: 1.6;
                    max-width: 800px;
                    margin: 0 auto;
                }
                h1 { color: #2196F3; }
                .stat-card {
                    background: #f5f5f5;
                    border-radius: 8px;
                    padding: 20px;
                    margin: 20px 0;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .model-name {
                    font-size: 18px;
                    font-weight: bold;
                    margin-bottom: 10px;
                }
                .claude { color: #6B46C1; }
                .chatgpt { color: #10A37F; }
                .stat-row {
                    display: flex;
                    justify-content: space-between;
                    padding: 8px 0;
                    border-bottom: 1px solid #e0e0e0;
                }
                .stat-row:last-child {
                    border-bottom: none;
                    font-weight: bold;
                }
                .cost {
                    color: #f44336;
                    font-weight: bold;
                }
                .total {
                    background: #e3f2fd;
                    border-radius: 8px;
                    padding: 20px;
                    text-align: center;
                    margin: 20px 0;
                }
                .reset-btn {
                    background: #ff5252;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 4px;
                    cursor: pointer;
                    margin-top: 20px;
                }
                .tip {
                    background: #fff3cd;
                    padding: 15px;
                    border-radius: 4px;
                    margin: 20px 0;
                }
            </style>
        </head>
        <body>
            <h1>üìä Token-Verbrauch f√ºr ${new Date().toLocaleDateString('de-DE')}</h1>
            
            <div class="total">
                <h2>Gesamtkosten heute: <span class="cost">$${totalCostToday.toFixed(3)}</span></h2>
            </div>
            
            <div class="stat-card">
                <div class="model-name claude">ü§ñ Claude-3.5-Sonnet</div>
                <div class="stat-row">
                    <span>Input Tokens:</span>
                    <span>${tokenUsage.claude.input.toLocaleString()}</span>
                </div>
                <div class="stat-row">
                    <span>Output Tokens:</span>
                    <span>${tokenUsage.claude.output.toLocaleString()}</span>
                </div>
                <div class="stat-row">
                    <span>Kosten:</span>
                    <span class="cost">$${tokenUsage.claude.cost.toFixed(3)}</span>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="model-name chatgpt">üß† GPT-4</div>
                <div class="stat-row">
                    <span>Input Tokens:</span>
                    <span>${tokenUsage.chatgpt.input.toLocaleString()}</span>
                </div>
                <div class="stat-row">
                    <span>Output Tokens:</span>
                    <span>${tokenUsage.chatgpt.output.toLocaleString()}</span>
                </div>
                <div class="stat-row">
                    <span>Kosten:</span>
                    <span class="cost">$${tokenUsage.chatgpt.cost.toFixed(3)}</span>
                </div>
            </div>
            
            <div class="tip">
                üí° <strong>Tipp:</strong> Die Token-Z√§hlung ist eine Sch√§tzung. 
                Die tats√§chlichen Kosten k√∂nnen leicht abweichen.
            </div>
            
            <button class="reset-btn" onclick="if(confirm('Statistik wirklich zur√ºcksetzen?')) { window.location.href = 'command:arduino-ai.resetTokenStats'; }">
                Statistik zur√ºcksetzen
            </button>
        </body>
        </html>
    `;
}

// Command zum Zur√ºcksetzen:
function resetTokenStats() {
    tokenUsage = {
        claude: { input: 0, output: 0, cost: 0 },
        chatgpt: { input: 0, output: 0, cost: 0 },
        daily: new Date().toDateString()
    };
    saveTokenUsage();
    updateStatusBar();
    vscode.window.showInformationMessage('‚úÖ Token-Statistik zur√ºckgesetzt!');
}

function handleApiError(error) {
    const modelName = currentModel === 'claude' ? 'Claude' : 'ChatGPT';
    
    if (error.message.includes('API Key')) {
        vscode.window.showErrorMessage(
            `üîë ${error.message}`,
            'API Key eingeben',
            'Modell wechseln'
        ).then(selection => {
            if (selection === 'API Key eingeben') {
                vscode.commands.executeCommand('arduino-ai.setApiKey');
            } else if (selection === 'Modell wechseln') {
                vscode.commands.executeCommand('arduino-ai.switchModel');
            }
        });
    } else {
        vscode.window.showErrorMessage(`‚ùå ${modelName} Fehler: ${error.message}`);
    }
}

function deactivate() {
    if (statusBarItem) {
        statusBarItem.dispose();
    }
    console.log('Arduino AI Assistant deaktiviert');
}
exports.deactivate = deactivate;
EXTENSION_EOF

# Create manifest
sudo tee "$TARGET/extension.vsixmanifest" > /dev/null << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<PackageManifest Version="2.0.0" xmlns="http://schemas.microsoft.com/developer/vsx-schema/2011">
  <Metadata>
    <Identity Language="en-US" Id="arduino-claude-assistant" Version="2.0.0" Publisher="local"/>
    <DisplayName>Arduino Claude Assistant</DisplayName>
    <Description xml:space="preserve">KI-Hilfe f√ºr Arduino mit Fehler-Erkl√§rung und Debug-Support</Description>
  </Metadata>
  <Installation>
    <InstallationTarget Id="Microsoft.VisualStudio.Code"/>
  </Installation>
  <Assets>
    <Asset Type="Microsoft.VisualStudio.Code.Manifest" Path="extension/package.json" Addressable="true"/>
  </Assets>
</PackageManifest>
EOF

# Set permissions
sudo chmod -R 755 "$TARGET"

echo "‚úÖ Installation complete!"
echo ""
echo "üìñ Next steps:"
echo "1. Restart Arduino IDE"
echo "2. Press Ctrl+Shift+C or click 'Claude' in status bar"
echo "3. Enter your Claude API Key"
echo ""
echo "üéØ Quick start: Mark some code and press Ctrl+Shift+C!"
