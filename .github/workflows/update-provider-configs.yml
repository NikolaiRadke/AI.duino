name: Auto Update Provider Configs

on:
  schedule:
    - cron: '0 6 * * 1'  # Jeden Montag um 6:00 UTC
  workflow_dispatch:     # Manueller Trigger über GitHub UI

env:
  CONFIG_FILE_PATH: 'aiduino/extension/out/config/providerConfigs.js'
  UPDATE_ENDPOINT: 'https://www.nikolairadke.de/aiduino/update-configs.php'

jobs:
  update-configs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Backup Current Config
      run: |
        if [ -f "$CONFIG_FILE_PATH" ]; then
          cp "$CONFIG_FILE_PATH" "$CONFIG_FILE_PATH.bak"
          echo "Backup erstellt: $CONFIG_FILE_PATH.bak"
        else
          echo "Config-Datei nicht gefunden: $CONFIG_FILE_PATH"
          exit 1
        fi
        
    - name: Check for Existing Backup and Remove Old One
      run: |
        # Entferne alte .bak Dateien (nur eine behalten)
        find $(dirname "$CONFIG_FILE_PATH") -name "*.bak" -not -name "$(basename $CONFIG_FILE_PATH).bak" -delete 2>/dev/null || true
        
    - name: Call Update Script
      id: update
      run: |
        echo "Rufe Update-Script auf..."
        
        response=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
          -X POST "$UPDATE_ENDPOINT" \
          -H "X-Update-Token: ${{ secrets.UPDATE_TOKEN }}" \
          -H "User-Agent: GitHub-Actions-ConfigUpdater/1.0")
        
        http_code=$(echo "$response" | tail -n1 | cut -d: -f2)
        body=$(echo "$response" | sed '$d')
        
        echo "HTTP Status: $http_code"
        
        if [ "$http_code" = "204" ]; then
          echo "result=no_update" >> $GITHUB_OUTPUT
          echo "Keine Updates notwendig"
        elif [ "$http_code" = "200" ]; then
          echo "result=updated" >> $GITHUB_OUTPUT
          echo "$body" > "$CONFIG_FILE_PATH"
          echo "Config erfolgreich aktualisiert"
        else
          echo "result=error" >> $GITHUB_OUTPUT
          echo "Fehler beim Update: HTTP $http_code"
          echo "$body"
          exit 1
        fi
        
    - name: Validate Updated Config
      if: steps.update.outputs.result == 'updated'
      run: |
        echo "Validiere aktualisierte Config..."
        
        # Prüfe ob wichtige Elemente vorhanden sind
        if ! grep -q "CONFIG_VERSION" "$CONFIG_FILE_PATH"; then
          echo "Fehler: CONFIG_VERSION fehlt in der aktualisierten Datei"
          exit 1
        fi
        
        if ! grep -q "PROVIDER_CONFIGS" "$CONFIG_FILE_PATH"; then
          echo "Fehler: PROVIDER_CONFIGS fehlt in der aktualisierten Datei"
          exit 1
        fi
        
        if ! grep -q "module.exports" "$CONFIG_FILE_PATH"; then
          echo "Fehler: module.exports fehlt in der aktualisierten Datei"
          exit 1
        fi
        
        # Zeige neue Version
        new_version=$(grep "CONFIG_VERSION" "$CONFIG_FILE_PATH" | head -1 | cut -d"'" -f2)
        echo "Neue CONFIG_VERSION: $new_version"
        
    - name: Commit and Push Changes
      if: steps.update.outputs.result == 'updated'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Neue CONFIG_VERSION ermitteln
        new_version=$(grep "CONFIG_VERSION" "$CONFIG_FILE_PATH" | head -1 | cut -d"'" -f2)
        
        git add "$CONFIG_FILE_PATH" "$CONFIG_FILE_PATH.bak"
        git commit -m "chore: update provider configs to version $new_version

        - Automatische Aktualisierung der Provider-Konfiguration
        - Neue Modelle und Preise für $(date +'%B %Y')
        - Backup gespeichert als $(basename $CONFIG_FILE_PATH).bak"
        
        git push
        
    - name: Create Summary
      run: |
        echo "## Provider Config Update Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.update.outputs.result }}" = "no_update" ]; then
          echo "✅ Keine Updates notwendig - Config ist aktuell" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.update.outputs.result }}" = "updated" ]; then
          new_version=$(grep "CONFIG_VERSION" "$CONFIG_FILE_PATH" | head -1 | cut -d"'" -f2)
          echo "🔄 Config erfolgreich aktualisiert auf Version: \`$new_version\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backup erstellt: \`$(basename $CONFIG_FILE_PATH).bak\`" >> $GITHUB_STEP_SUMMARY
          echo "- Änderungen automatisch committed und gepusht" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.update.outputs.result }}" = "error" ]; then
          echo "❌ Fehler beim Update - siehe Logs für Details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Nächstes geplantes Update:** $(date -d 'next monday 06:00' +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
